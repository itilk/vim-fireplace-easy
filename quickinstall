#!/usr/bin/env bash

set -o pipefail
set -o nounset
set -o errexit
#set -o xtrace

function print_help {
echo ""
echo "Installs vim plugins and config for fireplace, paredit and vim-clojure-static"
echo "    -f    Replace existing config and plugins (old files will be backed up to ~/oldvim"
echo "    -h    Print this message and exit"
echo ""
}

__dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

now=`date`
backup_path="${HOME}/oldvim/${now}/"
backup_path=${backup_path//[: ]/} #remove space and : characters from date
do_over=
old_plugins=
old_config=

OPTIND=1
while getopts "hf" opt; do
    case "$opt" in
        h)
            print_help
            exit 0
            ;;
        f)
            do_over=true
            ;;
    esac
done

shift $((OPTIND-1))

cpwd="$(pwd)"
if [ -a ./bundle/Vundle.vim/.git ]; then
	cd ./bundle/Vundle.vim
	git pull
	cd $cpwd
else
	git clone https://github.com/gmarik/Vundle.vim ./bundle/Vundle.vim
fi

if [ -a ~/.vim ]; then
    old_plugins=true
fi

if [ -a ~/.vimrc ]; then
    old_config=true
fi

if [  -n "${old_config}"  -o  -n "${old_plugins}" ]; then
    if [ -z "${do_over}" ]; then
        echo ""
        echo "It looks like you have an existing ~/.vim folder or ~/.vimrc file."
        echo "If you really want to replace them then rerun using with the -f"
        echo "option."
        echo ""
        exit 1
    fi
    
    mkdir -p ${backup_path}

    if [ -n "${old_config}" ]; then
        mv ~/.vimrc "${backup_path}" && echo "NOTICE: Your old vim config has been moved to ${backup_path}"
    fi

    if [ -n "${old_plugins}" ]; then
        cp -RHf ~/.vim "${backup_path}"  && rm -rf ~/.vim && echo "NOTICE: Your old vim plugins have been moved to ${backup_path}"
    fi
fi

ln -s ${__dir} ~/.vim
ln -s ~/.vim/vimrc.vim ~/.vimrc
vim +PluginInstall +qall
vim -c "helptags ~/.vim/bundle/vim-fireplace/doc" -c "q"
vim ${__dir}/README.md -c "26 :norm zt"
